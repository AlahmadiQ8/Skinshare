/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.2.1.0 (NJsonSchema v10.1.3.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class RoutinesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getRoutine(identifier: string): Observable<Routine | null> {
        let url_ = this.baseUrl + "/api/Routines/{identifier}";
        if (identifier === undefined || identifier === null)
            throw new Error("The parameter 'identifier' must be defined.");
        url_ = url_.replace("{identifier}", encodeURIComponent("" + identifier)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRoutine(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRoutine(<any>response_);
                } catch (e) {
                    return <Observable<Routine | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<Routine | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetRoutine(response: HttpResponseBase): Observable<Routine | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Routine.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Routine | null>(<any>null);
    }

    postRoutine(id: number | undefined, title: string | null, description: string | null | undefined, identifier: string | null | undefined, steps: Step[] | null): Observable<Routine | null> {
        let url_ = this.baseUrl + "/api/Routines?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        if (title === undefined)
            throw new Error("The parameter 'title' must be defined.");
        else
            url_ += "title=" + encodeURIComponent("" + title) + "&"; 
        if (description !== undefined)
            url_ += "description=" + encodeURIComponent("" + description) + "&"; 
        if (identifier !== undefined)
            url_ += "identifier=" + encodeURIComponent("" + identifier) + "&"; 
        if (steps === undefined)
            throw new Error("The parameter 'steps' must be defined.");
        else
            steps && steps.forEach((item, index) => { 
                for (let attr in item)
        			if (item.hasOwnProperty(attr)) {
        				url_ += "steps[" + index + "]." + attr + "=" + encodeURIComponent("" + (<any>item)[attr]) + "&";
        			}
            });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPostRoutine(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPostRoutine(<any>response_);
                } catch (e) {
                    return <Observable<Routine | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<Routine | null>><any>_observableThrow(response_);
        }));
    }

    protected processPostRoutine(response: HttpResponseBase): Observable<Routine | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Routine.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Routine | null>(<any>null);
    }
}

export class Routine implements IRoutine {
    id!: number;
    title!: string;
    description?: string | undefined;
    identifier?: string | undefined;
    steps!: Step[];

    constructor(data?: IRoutine) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.steps = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.description = _data["description"];
            this.identifier = _data["identifier"];
            if (Array.isArray(_data["steps"])) {
                this.steps = [] as any;
                for (let item of _data["steps"])
                    this.steps!.push(Step.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Routine {
        data = typeof data === 'object' ? data : {};
        let result = new Routine();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["description"] = this.description;
        data["identifier"] = this.identifier;
        if (Array.isArray(this.steps)) {
            data["steps"] = [];
            for (let item of this.steps)
                data["steps"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IRoutine {
    id: number;
    title: string;
    description?: string | undefined;
    identifier?: string | undefined;
    steps: Step[];
}

export class Step implements IStep {
    id!: number;
    description!: string;
    order!: number;
    partOfDay!: PartOfDay;
    routineId!: number;
    routine?: Routine | undefined;

    constructor(data?: IStep) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.description = _data["description"];
            this.order = _data["order"];
            this.partOfDay = _data["partOfDay"];
            this.routineId = _data["routineId"];
            this.routine = _data["routine"] ? Routine.fromJS(_data["routine"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Step {
        data = typeof data === 'object' ? data : {};
        let result = new Step();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["description"] = this.description;
        data["order"] = this.order;
        data["partOfDay"] = this.partOfDay;
        data["routineId"] = this.routineId;
        data["routine"] = this.routine ? this.routine.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IStep {
    id: number;
    description: string;
    order: number;
    partOfDay: PartOfDay;
    routineId: number;
    routine?: Routine | undefined;
}

export enum PartOfDay {
    Morning = 10,
    Evening = 20,
}

export class ApiException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}